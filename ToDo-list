<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<style>
    /* btn + */
    #newTask {
        background-color: aquamarine;
        font-size: 32px;
        border-radius: 50%;
        padding: 3px 12px;
        border: none;
        transition: background-color 0.2s ease;
        transition: transform 0.3s ease-out;
        cursor: pointer;
        margin: 5px;

    }

    #newTask:active {
        transform: scale(0.9);
    }

    #newTask:hover {
        background-color: rgb(86, 202, 163);
    }

    /* input, task title */
    #taskTitle {

        height: 32px;
        border-radius: 2%;
        width: calc(100% - 75px);
        /* fill space */
        overflow: auto;
        padding: 5px;
        font-size: 16px;
        outline: none;
        border: 1px solid rgba(49, 46, 46, 0.281);
    }

    #taskTitle:focus {
        border-color: aquamarine;
        border-width: 2px;

    }

    /* tasks list */
    #tasksList {
        margin: 0;
        padding: 0;
        margin-top: 40px;

        --icon-space: 1.7em;
        list-style: none;
        padding: 0;

    }


    /* Style the list items */
    #tasksList li {
        position: relative;
        padding: 12px 10px;
        padding-left: 40px;
        font-size: 15px;
        transition: 0.2s;
        margin-left: 2%;
        color: black;
        border-bottom: 1px solid #eeeeee;

        /* make the list items unselectable */
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;

    }

    /* task check box */
    #tasksList li::before {
        content: '';
        position: absolute;
        border-color: #31303060;
        border-style: solid;
        border-width: 1.8px;
        height: 15px;
        width: 15px;
        margin-left: calc(var(--icon-space) * -1.3);
    }


    #tasksList li:last-child {
        border: none;
    }

    /* When clicked on, add a background color and strike out text */
    #tasksList li.checked {
        background: rgb(109, 197, 168);
        color: #fff;
        text-decoration: line-through;
    }


    /* Add a "checked" mark when clicked on */
    #tasksList li.checked::before {
        content: '';
        position: absolute;
        border-color: #fff;
        border-style: solid;
        border-width: 0 2px 2px 0;

        transform: rotate(45deg);
        height: 13px;
        width: 5px;
        margin-left: calc(var(--icon-space) * -1);
    }

    #tasksList li:hover {
        background: #eee;
    }

    /* delate btn*/
    .delate {
        float: right;
        font-size: 25px;
        margin: 0;
        transition: background-color 0.3s ease;
        color: black;
        cursor: pointer;
        position: absolute;
        right: 0;
        top: 0;
        padding: 7px 16px;
    }

    .delate:hover {
        background-color: #31303060;
    }

    /* error message (task title input unvalued)*/
    p#error {
        display: none;
        padding: 5px;
        text-align: center;
        background-color: rgba(255, 0, 0, 0.562);
        border: dashed red;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    /* tasks list is empty (message) */
    p#emptyList {
        padding: 5px;
        text-align: center;
        margin-top: 50%;
        display: none;
    }
</style>

<body>
    <button id="newTask" onclick="addTask()">+</button>
    <input placeholder="Task title" type="text" name="taskTitle" id="taskTitle">
    <p id="error">Error</p>

    <p id="emptyList">ADD TASKS +</p>

    <ul id="tasksList">
        <li class="checked">Home</li>
        <li>Services</li>
    </ul>
    <script>

        // Loop all items in list
        let itemList = document.getElementsByTagName("li");
        for (var i = 0; i < itemList.length; i++) {
            add_delateBtn(itemList[i]);
        }

        // Create a delate button + add it to list item
        function add_delateBtn(li) {
            var span = document.createElement("span");
            var delateTask = document.createTextNode("\u00D7");
            span.className = "delate";
            span.appendChild(delateTask);
            li.appendChild(span);
            onclick_delate(span);
        }

        // Handle ("delate") item onclick delate btn
        function onclick_delate(span) {
            span.addEventListener('click', function (ev) {
                var div = span.parentElement;
                div.style.display = "none";
                isEmpty() // check list 
            }, false);
            
        }

        // add new task (if input is not empty)
        function addTask() {
            let task = document.getElementById("taskTitle").value;
            if (task == '') {
                //show error massage (for 2 sec)
                document.getElementById("error").style.opacity = "1";
                document.getElementById("error").style.display = "block";
                setTimeout(function () {
                    document.getElementById("error").style.opacity = "0";
                    setTimeout(function () {
                        document.getElementById("error").style.display = "none";
                    }, 300);
                }, 2000);
                isEmpty() // check list 
            }

            else {
                document.getElementById("error").style.display = "none"; // hide error massage
                let tasksList = document.getElementById('tasksList');
                let li = document.createElement('li');
                li.textContent = task;
                // add it to the ul element
                tasksList.appendChild(li);
                document.getElementById("taskTitle").value = "";
                add_delateBtn(li);
                isEmpty() // check list 
            }
        }

        // Add a "checked" symbol when clicking on a list item
        let tasksList = document.querySelector('ul');
        tasksList.addEventListener('click', function (ev) {
            if (ev.target.tagName === 'LI') {
                ev.target.classList.toggle('checked'); // add to li class - checked
            }
        }, false);

        // Handel enter press => add new task (if input is not empty)
        document.getElementById("taskTitle")
            .addEventListener("keyup", function (event) {
                event.preventDefault();
                if (event.keyCode === 13) {
                    addTask();
                }
            });


        // on left mouse click (up) => hide error massage
        /*
        document.onmouseup = click
        function click(event) {
            if (event.button == 0) {
                document.getElementById("error").style.opacity = "1";
                setTimeout(function () {
                    document.getElementById("error").style.opacity = "0";
                    setTimeout(function () {
                        document.getElementById("error").style.display = "none";
                    }, 300);
                }, 2000);
            }
        }
        */


        isEmpty() // check list 
        // if list is empty, show message
        function isEmpty() {
            document.getElementById("tasksList").innerHTML.trim() == "" ? document.getElementById("emptyList").style.display = "block" : document.getElementById("emptyList").style.display = "none";
        }

        let arrTasks = [];

        function addToARR (str)
        {
            let task ={title: str , checked: false ,id: arrTasks.length }
            arrTasks.push(task);
        }

    </script>
</body>

</html>